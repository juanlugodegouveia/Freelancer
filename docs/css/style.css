:root {
  --primario: #ffc107;
  --secundario: #0097A7;
  --oscuro: #212121;
  --anchoPantalla: 1200px;
  --gris: #757575;
} /*Almacenamos en la raiz del proyecto */

html {
  box-sizing: border-box;
  min-height: 100%; /* Una mejor visualizacion para utilizar todo el espacio del fondo del gradient */
  font-size: 62.5%;
}

*, *:before, *:after {
  box-sizing: inherit;
} /* Codigo para no afectar el diseno de la pagina al utilizar padding */

body {
  font-family:'Krub', sans-serif;
  min-height: 100%; /* Una mejor visualizacion para utilizar todo el espacio del fondo del gradient */
  background-image: linear-gradient(135deg, #f5f7fa 0%, #c3cfe2 100%); /* Gradient copiado desde https://webgradients.com/ */
  font-size: 1.6rem;

}

h1, h2, h3 {
   margin: 0
}
h2, h3 {
  text-align: center;
}

h3 {
  color: var(--secundario);
  font-weight: 400;
  font-size: 3rem;
}

p {
  font-size: 1.7rem;
  line-height: 2;
}

.site-header {
  background-color: white;
}

.site-header nav {
  max-width: var(--anchoPantalla); /* Definimos el tamano de la pantalla */
  margin: 0 auto; /* Centramos el contenido */
  padding: 2rem 0;

/* CSS para el Flexbox */

  display: flex;
  flex-direction: column; /* Declaramos la barra como una columna y luego con @media declaramos el tamano para pasarlo a "row"  */
  align-items: center; /*Para poder adaptar la pagina al momento de manipular el tamano de la ventana */
  } /* Te permite crear un sitio web responsivo (adaptable), trabajamos como formula con el "font-size: 62.5%" en el html y "font-size: 1.6rem;" */

@media (min-width:768px) { /*Al llegar a 768px, la pagina pasa a modo row, para adaptar el diseno */
  .site-header nav {
  flex-direction: row;
  justify-content: space-between;/* Para distribuir el contenido  a lo largo de la pagina */
  }
}

.site-header nav a {
  color: var(--oscuro);
  font-size: 2.2rem;
  text-decoration: none;
  margin-bottom: 2rem;
}

.site-header nav a:last-of-type {
  margin-bottom: 0;
}

@media (min-width:768px) { /*Al llegar a 768px, la pagina pasa a modo row, para adaptar el diseno */
  .site-header nav a {
  margin-bottom: 0; /* Para definir el margen de 0 para cuando se este en un dispositivo mas grande */
  }
}

.hero {
  height: 45rem; /* Declaramos las dimensiones de la imagen */
  background-image: url(../img/hero.jpg);
  position: relative;
  display: flex; /*Para acomodar el margen de la imagen con respecto a la barra */
  justify-content: center; /*Centramos el contenido horizontalmente, utilizamos justify-content: center POR QUE ESTAMOS UTILIZANDO flex-direction: row; de lo contrario utilizariamos align-items: center;  para centrarlo verticalmente*/
  align-items: center;
}

.hero::after {
  content: ''; /* Utilizamos este codigo para poner un color de fondo, siempre que se usa un after y color de fondo hay que poner un "content: ''" */
  background-color: rgba(0, 0, 0, 0.7);
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
}

.contenedor-hero {
  color: white;
  position: relative;
  z-index: 1; /* Utilizamos este condigo junto con la posicion relativa para sobreponer nuestro texto ya que debido al after se sobrepone la imagen de fondo negra y no se ve el texto. Se le da un valor mayor cualquiera mayor a 0 al z-index para que funcione  */
  text-align: center;
}

.contenedor-hero i { /* "i" es la marca para el icono del mapa */
  font-size: 5rem;
  color: var(--primario);
}

.boton {
  background-color: var(--secundario);
  padding: 1rem 5rem;
  display: inline-block; /* Nos permite darle un margen al boton, ya que por el valor por default no te permite */
  margin-top: 1rem;
  color: white;
  text-decoration: none;
  text-transform: uppercase;
  font-weight: 700;
  font-size: 2.2rem;
  border-radius: .5rem;
  border: none;
}

.boton:hover {
  cursor: pointer;
}

.servicios.contenedor { /*Podemos definirlo solo como contenedor */
  max-width: var(--anchoPantalla);
  margin: 0 auto;
  background-color: white;
  padding: 3rem;
  border-radius: 1rem;
  -webkit-box-shadow: 0px 10px 21px -5px rgba(0,0,0,0.74);
  -moz-box-shadow: 0px 10px 21px -5px rgba(0,0,0,0.74);
  box-shadow: 0px 10px 21px -5px rgba(0,0,0,0.74);
}

.contenedor.servicios { /* Podemos definirlo solo como servicios */
  margin: 3rem auto;
}

.contenedor-servicios {
  margin-top: 3rem;
}

@media (min-width: 768px) {
  .contenedor-servicios {
    display: flex;
    justify-content: space-between;
  }
  .servicio {
    flex: 0 0 calc(33.3% - 1rem); /* Cumple la funcionalidad del margim,  toma los 1200px lo divide entre tres elementos tomando el mismo espacio. El flex toma tres parametro, el primero es el factor de crecimiento, el segundo es lo que se hace mas pequeno y el ultimo es su base. Si le damos el valor de 0 0 calc(33.3% - 1 rem); lo que hara es dividir el espacio del contenedor de servicios y lo divide en partes iguales. */
  }
}

.servicio {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.iconos {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  background-color: var(--primario);
  display: flex;
  justify-content: space-evenly;
  align-items: center;
  margin-top: 3rem;
}

.iconos {
  font-size: 3rem;
}

form {
  background-color: var(--gris);
  padding: 2rem;
  border-radius: 1rem;
  margin-top: 3rem;
}

form legend {
  text-align: center;
  font-size: 2rem;
  color: var(--primario);
  margin: 3rem 0;
}

@media (min-width: 768px) {
  form {
    max-width: 800px;
    margin: 3rem auto;
  } /*Cierre form */
  .contenedor-campos {
    display: flex;
    justify-content: space-between;
    flex-wrap: wrap;
  } /*Cierre .contenedor-campos */
  .campos {
    flex: 0 0 calc(50% - 1rem);
  } /* Cierre campos */
} /* Cierre media */

.campos {
  display: flex;
  margin-bottom: 2rem;
}

.campos label {
  flex: 0 0 90px;
  padding-top: .5rem;
  color: white;

}

.campos input {
  flex: 1;
  height: 4rem;
}

.campos textarea {
  flex: 1;
  height: 6rem;
}

.campos.w-100 {
  flex: 0 0 100%;
}

.enviar {
  display: flex;
  justify-content: flex-end;
}
